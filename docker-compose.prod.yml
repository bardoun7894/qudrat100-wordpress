# Production Docker Compose Override
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # WordPress Application - Production Configuration
  wordpress:
    environment:
      # Production WordPress settings
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_HOME', '${SITE_URL}');
        define('WP_SITEURL', '${SITE_URL}');
        define('FORCE_SSL_ADMIN', true);
        define('WP_DEBUG', false);
        define('WP_DEBUG_LOG', false);
        define('WP_DEBUG_DISPLAY', false);
        define('SCRIPT_DEBUG', false);
        define('WP_MEMORY_LIMIT', '256M');
        define('WP_MAX_MEMORY_LIMIT', '512M');
        define('AUTOMATIC_UPDATER_DISABLED', true);
        define('WP_AUTO_UPDATE_CORE', false);
        define('DISALLOW_FILE_EDIT', true);
        define('DISALLOW_FILE_MODS', false);
        define('WP_CACHE', true);
        define('WP_CRON_LOCK_TIMEOUT', 60);
        
        // Security keys - replace with actual values
        define('AUTH_KEY', '${AUTH_KEY}');
        define('SECURE_AUTH_KEY', '${SECURE_AUTH_KEY}');
        define('LOGGED_IN_KEY', '${LOGGED_IN_KEY}');
        define('NONCE_KEY', '${NONCE_KEY}');
        define('AUTH_SALT', '${AUTH_SALT}');
        define('SECURE_AUTH_SALT', '${SECURE_AUTH_SALT}');
        define('LOGGED_IN_SALT', '${LOGGED_IN_SALT}');
        define('NONCE_SALT', '${NONCE_SALT}');
    volumes:
      # Production volume mounts
      - wordpress_data:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./wp-content/themes:/var/www/html/wp-content/themes
      - ./wp-content/plugins:/var/www/html/wp-content/plugins
      - ./wp-content/uploads:/var/www/html/wp-content/uploads
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Database - Production Configuration
  db:
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - wordpress_db:/var/lib/mysql
      - ./docker/mysql-init:/docker-entrypoint-initdb.d
      - ./docker/mysql-backup:/backup
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: wordpress_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./docker/certbot/www:/var/www/certbot:ro
    depends_on:
      - wordpress
    networks:
      - wordpress_network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: wordpress_certbot
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME} -d www.${DOMAIN_NAME}
    profiles:
      - ssl-setup

  # Redis for caching (optional)
  redis:
    image: redis:alpine
    container_name: wordpress_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - wordpress_network
    profiles:
      - cache
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Backup service
  backup:
    image: alpine:latest
    container_name: wordpress_backup
    restart: "no"
    volumes:
      - wordpress_data:/var/www/html:ro
      - wordpress_db:/var/lib/mysql:ro
      - ./docker/backups:/backups
    command: |
      sh -c "
        apk add --no-cache mysql-client tar gzip &&
        mkdir -p /backups &&
        cd /var/www/html &&
        tar -czf /backups/wordpress-files-$(date +%Y%m%d-%H%M%S).tar.gz . &&
        mysqldump -h db -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} | gzip > /backups/wordpress-db-$(date +%Y%m%d-%H%M%S).sql.gz &&
        find /backups -name '*.tar.gz' -mtime +${BACKUP_RETENTION_DAYS:-30} -delete &&
        find /backups -name '*.sql.gz' -mtime +${BACKUP_RETENTION_DAYS:-30} -delete
      "
    depends_on:
      - db
      - wordpress
    networks:
      - wordpress_network
    profiles:
      - backup

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: wordpress_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - wordpress_network
    profiles:
      - monitoring

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: wordpress_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - wordpress_network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local